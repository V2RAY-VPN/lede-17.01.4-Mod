#!/bin/sh /etc/rc.common

START=99
STOP=10
USE_PROCD=1
NAME=aria2
PROG=/usr/bin/aria2c

append_params() {
	local p; local v; local s="$1"; shift
	for p in $*; do
		config_get v "$s" "$p"
		[ -n "$v" ] && (
			p=$(echo "$p" | sed -e 's|_|-|g');
			echo "$p=$v" >> $config_file
			)
	done
}

section_enabled() {
	local result
	config_get_bool result "$1" 'enabled' 0
	[ $result -eq 1 ]
}

option_disabled() {
	local result
	config_get_bool result "$1" "$2" 1
	[ $result -eq 0 ]
}

match_dir() {
    local base_dir="$1"
    local sub_dir="$2"
    while [ -n "$sub_dir" ] && [ "$sub_dir" != "/" ]; do
        if [ "${sub_dir%/}" = "${base_dir%/}" ]; then
            return 0
        fi
        sub_dir="$(dirname $sub_dir)"
    done
    return 1
}

dir_mounted() {
    local my_dir_name="$1"
    local mounted_dir_name
    local IFS=$'\n'
    for mounted_dir_name in $(awk '/^\/dev\/sd[a-z][0-9]+( |\t)+.*$/{print $1,$2,$4}' /proc/mounts | grep -w 'rw' | awk '{print $2}'); do
        if match_dir "$mounted_dir_name" "$my_dir_name"; then
            return 0
        fi
    done
    return 1
}

aria2_start() {
	local s="$1"
	local user
	local nice

	section_enabled "$s" || return 1
	config_get dir "$s" 'dir'

	[ -n "$dir" ] || {
		logger -t ARIA2C "Please set downlod dir"
		return 1
	}

	[ -d "$dir" ] || {
		if dir_mounted "$dir"; then
			mkdir -p "$dir"
		else
			logger -t ARIA2C "Please create download dir: $dir"
			return 1
		fi
	}

	config_get config_dir "$s" 'config_dir' '/var/etc/aria2'
	config_get user "$s" 'user' 'root'
	config_get nice "$s" 'nice' 0

	config_file="$config_dir/aria2.conf"
	session_file="$config_dir/aria2.session"
	dht_file="$config_dir/dht.dat"
	log_file="$config_dir/aria2.log"

	[ -d "$config_dir" ] || {
		mkdir -m 0755 -p "$config_dir"
		touch "$config_file"
	}

	touch "$session_file" # create session file

	echo -e "enable-rpc=true\nrpc-allow-origin-all=true\nrpc-listen-all=true\nquiet=true" > $config_file
	echo -e "continue=true\ninput-file=$session_file\nsave-session=$session_file" >> $config_file

	option_disabled "$s" 'enable_dht' || echo "dht-file-path=$dht_file" >> $config_file
	option_disabled "$s" 'enable_log' || {
		[ -f "$log_file" ] && echo > $log_file # if log file exist, clear it
                echo -e "log=$log_file" >> $config_file
        }

	# if user is set, change dir owner
	[ -z "$user" ] || {
		chown -R $user:$user $config_dir
		chown -R $user:$user $dir
	}

	append_params "$s" \
		file_allocation bt_enable_lpd enable_dht rpc_user rpc_passwd rpc_listen_port dir bt_tracker disk_cache \
		max_overall_download_limit max_overall_upload_limit max_download_limit max_upload_limit max_concurrent_downloads \
		max_connection_per_server min_split_size split save_session_interval follow_torrent listen_port bt_max_peers \
		peer_id_prefix user_agent rpc_secret log_level
	
	config_list_foreach "$s" extra_settings append_extrasettings

	procd_open_instance "${NAME}.${s}"
	procd_set_param command "$PROG"
	procd_append_param command --conf-path="${config_file}"

	procd_set_param stderr 1
	procd_set_param user $user
	procd_set_param group $user
	procd_set_param nice $nice
	procd_set_param respawn
	procd_set_param limits core="0 0"

	procd_set_param file "$config_file"
	[ -n "$user" ] && \
		procd_set_param user "$user"

	procd_add_jail "${NAME}.${s}" log
	procd_add_jail_mount "$config_file"
	procd_add_jail_mount_rw "$dir" "$config_dir" "$log_file"
	procd_close_instance
}

append_extrasettings() {
	echo "$1" >> $config_file
}

start_service() {
	config_load "$NAME"
	config_foreach aria2_start "aria2"
}

service_triggers() {
	procd_add_reload_trigger "$NAME"
}
